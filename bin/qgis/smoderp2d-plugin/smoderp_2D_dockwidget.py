# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Smoderp2DDockWidget
                                 A QGIS plugin
 This plugin computes hydrological erosion model.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-10-10
        git sha              : $Format:%H$
        copyright            : (C) 2018-2020 by CTU
        email                : petr.kavka@fsv.cvut.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys

from PyQt5 import QtWidgets, uic
from PyQt5.QtCore import pyqtSignal, QFileInfo, QSettings

from PyQt5.QtWidgets import QFileDialog
from qgis.core import QgsProviderRegistry, QgsMapLayerProxyModel, QgsVectorLayer, QgsRasterLayer
from qgis.utils import iface
from qgis.gui import QgsMapLayerComboBox, QgsFieldComboBox

### ONLY FOR TESTING PURPOSES (!!!)
sys.path.insert(0,
                os.path.join(os.path.dirname(__file__), '..', '..', '..')
)
from smoderp2d import QGISRunner
from smoderp2d.exceptions import ProviderError

from .connect_grass import find_grass as fg

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'smoderp_2D_dockwidget_base.ui'))


class InputError(Exception):
    def __init__(self):
        pass


class Smoderp2DDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(Smoderp2DDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.iface = iface

        self.settings = QSettings("CTU", "smoderp")

        self.setupButtons()

        self.setupCombos()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def setupButtons(self):
        """Setup buttons slots."""

        # TODO: what if tables are in format that cannot be added to map? (txt), currently works for dbf

        self.run_dataprep.clicked.connect(self.OnRunButton)

        # 1st tab - Data preparation
        self.elevation_toolButton.clicked.connect(lambda: self.openFileDialog('raster', self.elevation_comboBox))
        self.soil_toolButton.clicked.connect(lambda: self.openFileDialog('vector', self.soil_comboBox))
        self.vegetation_toolButton.clicked.connect(lambda: self.openFileDialog('vector', self.vegetation_comboBox))
        self.points_toolButton.clicked.connect(lambda: self.openFileDialog('vector', self.points_comboBox))
#        self.output_toolButton.clicked.connect(lambda: self.openFileDialog('folder', self.output_lineEdit))
        self.stream_toolButton.clicked.connect(lambda: self.openFileDialog('vector', self.stream_comboBox))

        self.soil_comboBox.layerChanged.connect(lambda: self.setFields('soil'))
        self.vegetation_comboBox.layerChanged.connect(lambda: self.setFields('vegetation'))

        # 2nd tab - Computation
        self.pickle_toolButton.clicked.connect(lambda: self.openFileDialog('file', self.pickle_lineEdit))
        self.rainfall_toolButton.clicked.connect(lambda: self.openFileDialog('file', self.rainfall_lineEdit))

        # 3rd tab - Settings
        self.table_soil_vegetation_toolButton.clicked.connect(lambda: self.openFileDialog(
            'table', self.table_soil_vegetation_comboBox))
        self.table_stream_shape_toolButton.clicked.connect(lambda: self.openFileDialog(
            'table', self.table_stream_shape_comboBox))
        self.main_output_toolButton.clicked.connect(lambda: self.openFileDialog('folder', self.main_output_lineEdit))

        self.table_soil_vegetation_comboBox.layerChanged.connect(lambda: self.setFields('table_soil_veg'))
        self.table_stream_shape_comboBox.layerChanged.connect(lambda: self.setFields('table_stream_shape'))

    def setupCombos(self):
        """Setup combo boxes."""

        # 1st tab - Data preparation
        self.elevation_comboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.soil_comboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.vegetation_comboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.points_comboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.stream_comboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)

        self.setFields('soil')
        self.setFields('vegetation')

        # 3rd tab - Settings
        self.table_soil_vegetation_comboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.table_stream_shape_comboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)

        self.setFields('table_soil_veg')
        self.setFields('table_stream_shape')

    def OnRunButton(self):

        if self._checkInputDataPrep():

            # Get grass
            grass7bin = fg()

            # Get input parameters
            self._getInputParams()

            try:
                runner = QGISRunner()

            except ProviderError as e:
                raise ProviderError(e)

            runner.import_data(self._input_params)

            # TODO: implement data preparation only
            
            # runner.run()

            # TODO: to be implemented
            # runner.show_results()
        else:
            self._sendMessage("Input parameters error:",
                              "Some of mandatory fields are not filled correctly.",
                              "CRITICAL")

    def _getInputParams(self):
        """Get input parameters from QGIS plugin."""

        self._input_params = {
            'elevation': self.elevation_comboBox.currentLayer().dataProvider().dataSourceUri(),
            'soil': self.soil_comboBox.currentLayer().dataProvider().dataSourceUri().split('|', 1)[0],
            'soil_type': self.soil_type_comboBox.currentText(),
            'vegetation': self.vegetation_comboBox.currentLayer().dataProvider().dataSourceUri().split('|', 1)[0],
            'vegetation_type': self.vegetation_type_comboBox.currentText(),
            'points': "",
#            'output': self.output_lineEdit.text().strip(),
            'stream': "",
            'pickle': self.pickle_lineEdit.text().strip(),
            'rainfall_file': self.rainfall_lineEdit.text(),
            'end_time': float(self.end_time_lineEdit.text()),
            'maxdt': float(self.maxdt_lineEdit.text()),
            'table_soil_vegetation':
                self.table_soil_vegetation_comboBox.currentLayer().dataProvider().dataSourceUri().split('|', 1)[0],
            'table_soil_vegetation_code': self.table_soil_vegetation_code_comboBox.currentText(),
            'table_stream_shape': "",
            'table_stream_shape_code': "",
            'output': self.main_output_lineEdit.text().strip()
        }

        # optional inputs
        if self.points_comboBox.currentLayer() is not None:
            self._input_params["points"] = \
                self.points_comboBox.currentLayer().dataProvider().dataSourceUri().split('|', 1)[0]

        if self.stream_comboBox.currentLayer() is not None:
            self._input_params["stream"] = \
                self.stream_comboBox.currentLayer().dataProvider().dataSourceUri().split('|', 1)[0]

        if self.table_stream_shape_comboBox.currentLayer() is not None:
            self._input_params["table_stream_shape"] = \
                self.table_stream_shape_comboBox.currentLayer().dataProvider().dataSourceUri().split('|', 1)[0]
            self._input_params["table_stream_shape_code"] = self.table_stream_shape_code_comboBox.currentText()

    def _checkInputDataPrep(self):
        """Check if all mandatory fields are filled correctly for data preparation (without pickle)."""

        # Check if none of fields are empty
        if None not in (
                self.elevation_comboBox.currentLayer(),
                self.soil_comboBox.currentLayer(),
                self.soil_type_comboBox.currentText(),
                self.vegetation_comboBox.currentLayer(),
                self.vegetation_type_comboBox.currentText(),
                self.table_soil_vegetation_comboBox.currentLayer(),
                self.table_soil_vegetation_code_comboBox.currentText(),
                ) and "" not in (
#                self.output_lineEdit.text().strip(),
                self.maxdt_lineEdit.text().strip(),
                self.rainfall_lineEdit.text().strip(),
                self.end_time_lineEdit.text().strip(),
                self.main_output_lineEdit.text().strip()):
            # Check if maxdt and end_time are numbers
            try:
                float(self.maxdt_lineEdit.text())
                float(self.end_time_lineEdit.text())
                return True
            except ValueError:
                return False
        else:
            return False

    def _checkInputComp(self):
        """Check if pickle field is filled correctly for further computation."""
        if self.pickle_lineEdit.text().strip() == "":
            return False
        else:
            return True

    def openFileDialog(self, t, widget):
        """Open file dialog, load layer and set path/name to widget."""

        # TODO: what format can tables have?
        # TODO: set layers srs on loading

        # remember last folder where user was in
        sender = u'{}-last_used_file_path'.format(self.sender().objectName())
        last_used_file_path = self.settings.value(sender, '')

        if t == 'vector':
            file_name = QFileDialog.getOpenFileName(self, self.tr(u'Open file'),
                                                    self.tr(u'{}').format(last_used_file_path),
                                                    QgsProviderRegistry.instance().fileVectorFilters())[0]
            if file_name:
                name, file_extension = os.path.splitext(file_name)
                if file_extension not in QgsProviderRegistry.instance().fileVectorFilters():
                    self._sendMessage(u'Error', u'{} is not a valid vector layer.'.format(file_name), 'CRITICAL')
                    return

                self.iface.addVectorLayer(file_name, QFileInfo(file_name).baseName(), "ogr")
                widget.setLayer(self.iface.activeLayer())
                self.settings.setValue(sender, os.path.dirname(file_name))

        elif t == 'raster':
            file_name = QFileDialog.getOpenFileName(self, self.tr(u'Open file'),
                                                    self.tr(u'{}').format(last_used_file_path),
                                                    QgsProviderRegistry.instance().fileRasterFilters())[0]
            if file_name:
                name, file_extension = os.path.splitext(file_name)

                if file_extension not in QgsProviderRegistry.instance().fileRasterFilters():
                    self._sendMessage(u'Error', u'{} is not a valid raster layer.'.format(file_name), 'CRITICAL')
                    return

                self.iface.addRasterLayer(file_name, QFileInfo(file_name).baseName())
                widget.setLayer(self.iface.activeLayer())
                self.settings.setValue(sender, os.path.dirname(file_name))

        elif t == 'folder':
            folder_name = QFileDialog.getExistingDirectory(self, self.tr(u'Select directory'),
                                                           self.tr(u'{}').format(last_used_file_path))

            if os.access(folder_name, os.W_OK):
                widget.setText(folder_name)
                self.settings.setValue(sender, os.path.dirname(folder_name))
            elif folder_name == "":
                pass
            else:
                self._sendMessage(u'Error', u'{} is not writable.'.format(folder_name), 'CRITICAL')

        elif t == 'table':
            # write path to file to lineEdit
            file_name = QFileDialog.getOpenFileName(self, self.tr(u'Open file'),
                                                    self.tr(u'{}').format(last_used_file_path))[0]

            if file_name:
                self.iface.addVectorLayer(file_name, QFileInfo(file_name).baseName(), "ogr")
                widget.setLayer(self.iface.activeLayer())
                self.settings.setValue(sender, os.path.dirname(file_name))

        elif t == 'file':
            # write path to file to lineEdit
            file_name = QFileDialog.getOpenFileName(self, self.tr(u'Open file'),
                                                    self.tr(u'{}').format(last_used_file_path))[0]

            if file_name:
                widget.setText(file_name)
                self.settings.setValue(sender, os.path.dirname(file_name))
        else:
            pass

    def setFields(self, t):
        """Set fields of soil and vegetation type."""

        if self.soil_comboBox.currentLayer() is not None and t == 'soil':
            self.soil_type_comboBox.setLayer(self.soil_comboBox.currentLayer())
            self.soil_type_comboBox.setField(self.soil_comboBox.currentLayer().fields()[0].name())

        elif self.vegetation_comboBox.currentLayer() is not None and t == 'vegetation':
            self.vegetation_type_comboBox.setLayer(self.vegetation_comboBox.currentLayer())
            self.vegetation_type_comboBox.setField(self.vegetation_comboBox.currentLayer().fields()[0].name())

        elif self.table_soil_vegetation_comboBox.currentLayer() is not None and t == 'table_soil_veg':
            self.table_soil_vegetation_code_comboBox.setLayer(self.table_soil_vegetation_comboBox.currentLayer())
            self.table_soil_vegetation_code_comboBox.setField(
                self.table_soil_vegetation_comboBox.currentLayer().fields()[0].name())

        elif t == 'table_stream_shape':
            if self.table_stream_shape_comboBox.currentLayer() is not None:
                self.table_stream_shape_code_comboBox.setLayer(self.table_stream_shape_comboBox.currentLayer())
                self.table_stream_shape_code_comboBox.setField(
                    self.table_stream_shape_comboBox.currentLayer().fields()[0].name())
            else:
                self.table_stream_shape_code_comboBox.setLayer(None)
                self.table_stream_shape_code_comboBox.setField("")

        else:
            pass

    def _sendMessage(self, caption, message, t):
        if t == 'CRITICAL':
            self.iface.messageBar().pushCritical(self.tr(u'{}').format(caption),
                                                 self.tr(u'{}').format(message))
        elif t == 'INFO':
            self.iface.messageBar().pushInfo(self.tr(u'{}').format(caption),
                                             self.tr(u'{}').format(message))
